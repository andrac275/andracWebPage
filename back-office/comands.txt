#COMMANDS
Start as dev. This commandLine (and other ones) can be checked in package.json
    npm run start:dev

Generate
    nest generate --help    <- Shows all the help
    --MODULE
    nest generate module name (or path/name)
    --CONTROLLER
    nest generate controller name (or path/name)
        nest g co name --no-spec  <- noSpec makes the filer spec.ts to NOT be generated with the controller
    --SERVICE
    nest generate service name
        --no-spec can be used right there too. Same reason as controller
    --PIPE
    nest g pipe name
    --GUARD
    nest g guard name
    --MIDDLEWARE
    nest g middleware name
    --RESOURCES
    nest g recourse name        //This generates the service, module, controller, dto, test and entity files
=================================================================================
#NestJS Concepts and USEFUL INFORMATION#

On eslint.js  makes eslint to not show an error when working on Windows because commas
    ,'prettier/prettier': ['error', { endOfLine: 'auto' }],
    It has to be writen inside 'rules' section

===
Show nest icons on nest project
    Press F1 and search for 'JSON' and select 'Preferences: Open workspace settings (JSON)'
    Add this line:
        {
            "material-icon-theme.activeIconPack": "nest"
        }
===
DATA VALIDATION
A DTO can be used to validate data. Check Tasks module for more information. Through the following link (nestJS validation documentation), I can check what I need and how to do it.
    https://docs.nestjs.com/techniques/validation

===
PIPES
Pipes are used on nestJS to process information. For example:ParseBoolPipe or ParseIntPipe
In the 'index' module controller there is an example on getNumber function.
BUT it is possible to create own pipes, for example this one: 'index/pipes/validate-user.pipe.ts'

===
GUARDS
Those are functions that protect other functions. We can use an "if" to filtrate something, yes. BUT with a guard, we can do the same and can be reusable. 
There is an example in modules/index/guards/auth
If a guard return false (for example: GET 'http://localhost:3000/greetWithGuard'), the server sends 
    {
        "statusCode": 403,
        "message": "Forbidden resource",
        "error": "Forbidden"
    }
If the guard returns true (for example: GET 'http://localhost:3000/greetWithGuard/?name=Andrac&age=33'), it works as developed.
Example: I can create a Guard that checks a user role and allow or not depending the role. And this guard can be reusable wherever is needed

===
MIDDLEWARES
That's used to passthrough the middleware everytime a controller is accessed. In this example every time I visit the controller users with GET,POST... ('/users') this execute the middleware. 
Try it! http://localhost:3000/users
Example of middleware on modules/users/logger. That's the middleware but have to be configurated in the module 'userse.module.ts'
    UsersModule has to implement 'NestModule'
    UsersModule has to define 'configure' function
I created another middleware (AuthMiddleware) and that is used in users.module.ts too after LoggerMiddleware
    This second middleware checks if a POST object have a Headers called 'authorization', if not, throws
        {
            "statusCode": 401,
            "message": "ANDRAC auth-middleware: Unauthorized"
        }
    If it has it, it checks if the value is 'abcd123' (Thats the value defined in auth-middleware.middleware.ts) check the line
        Now will show the DTO validations

===
RESOURCES
Resources is a command that creates different files in a single command. Resources creates a service, module, controller, even the DTO in just one command
    I created a module called "resourcesTest" as a REST API , check it
        nest g resource modules/resourcesTest
    this generates a folder called "resources-test" with dto files, entities, module, service and controller
